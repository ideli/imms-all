<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="shiroId"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="shiroId"/>
        <property name="httpOnly" value="true"/>
        <!-- 保存cookie一周 -->
        <property name="maxAge" value="2592000"/>
    </bean>

    <!-- 会话验证调度器,会话过期后清除缓存中的认证授权信息 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 半小时 -->
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <bean id="rememberMeManager"
          class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvLhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <bean id="sessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <!--&lt;!&ndash; 会话DAO,把session放到缓存中 &ndash;&gt;-->
    <!--<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">-->
    <!--<property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
    <!--</bean>-->

    <!-- 使用下面配置的缓存管理器 -->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>-->

    <bean id="cacheManager" class="org.crazycake.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager"/>
    </bean>

    <!-- shiro redisManager -->
    <bean id="redisManager" class="org.crazycake.shiro.RedisManager">
        <property name="host" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="expire" value="${redis.expire}"/>
    </bean>

    <!-- 自定义认证结果监听器 -->
    <bean id="authcListener" class="com.hisign.imms.web.shiro.authc.MyAuthenticationListener"/>

    <!-- 自定义域：Reaml -->
    <bean id="myShiro" class="com.hisign.imms.web.shiro.realm.MyShiro"/>

    <!-- 自定义认证管理器 -->
    <bean id="myAuthenticator" class="com.hisign.imms.web.shiro.authc.MyModularRealmAuthenticator">
        <property name="listeners">
            <list>
                <ref bean="authcListener"></ref>
            </list>
        </property>
        <property name="realms">
            <list>
                <ref bean="myShiro"></ref>
            </list>
        </property>
    </bean>

    <!-- 配置权限管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- ref对应我们写的realm  MyShiro -->
        <property name="realm" ref="myShiro"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="authenticator" ref="myAuthenticator"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <bean id="anonFilter" class="org.apache.shiro.web.filter.authc.AnonymousFilter"/>
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter"/>
    <bean id="userFilter" class="com.hisign.imms.web.shiro.filter.MyUserFilter"/>
    <!--<bean id="passThruAuthenticationFilter" class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter">-->
        <!--<property name="loginUrl" value="/login"/>-->
    <!--</bean>-->

    <bean id="formAuthenticationFilter"
          class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/login"/>
    </bean>

    <!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 调用我们配置的权限管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置我们的登录请求地址 -->
        <property name="loginUrl" value="/intoLogin"/>

        <property name="filters">
            <util:map>
                <entry key="anon" value-ref="anonFilter"/>
                <entry key="user" value-ref="userFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <!--<entry key="authc" value-ref="passThruAuthenticationFilter"/>-->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>

        <!-- 权限配置 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon表示此地址不需要任何权限即可访问 -->
                /dist/** = anon
                /view/** = anon
                /lib/** = anon
                /data/** = anon
                /api/** = anon
                /websocket/** = anon
                /login = authc
                /logout = logout
                <!--所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/intoLogin-->
                /** = user
            </value>
        </property>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>